[General]
network = TestNetwork
repeat = 2

*.numRXHosts = 6  
*.numTXHosts = 6 
*.numRXTXHosts = 2
*.numRelays = 2

num-rngs = 3
**.mobility.rng-0 = 1
**.wlan[*].mac.rng-0 = 2
seed-set = 2+${repetition}

# Mobility Configuration
**.rxhost[*].mobility.typename = "StationaryMobility"
**.txhost[*].mobility.typename = "StationaryMobility"
**.rxtxhost[*].mobility.typename = "StationaryMobility"
**.relay[*].mobility.typename = "StationaryMobility"
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMaxX = 600m
**.mobility.constraintAreaMaxY = 600m

**.rxhost[0].mobility.initialZ = 0m
**.rxhost[0].mobility.initialX = ${100, 200, 350}m
**.rxhost[0].mobility.initialY = ${100, 200, 350}m
# Application configuration
# RX hosts: 1 Batman app + apps to receive from TX and RXTX hosts
*.rxhost[*].numApps = 9
# TX hosts: 1 Batman app + apps to connect to RX and RXTX hosts
*.txhost[*].numApps = 9
# RXTX hosts: 1 Batman app + apps to receive + apps to send
*.rxtxhost[*].numApps = 17

*.relay[*].numApps = 1




# tcp settings
**.tcp.typename = "Tcp"
**.tcp.advertisedWindow = 65535                      # in bytes, corresponds with the maximal receiver buffer capacity (Note: normally, NIC queues should be at least this size)
**.tcp.delayedAcksEnabled = false                    # delayed ACK algorithm (RFC 1122) enabled/disabled
**.tcp.nagleEnabled = true                           # Nagle's algorithm (RFC 896) enabled/disabled
**.tcp.limitedTransmitEnabled = false                # Limited Transmit algorithm (RFC 3042) enabled/disabled (can be used for TcpReno/TcpTahoe/TcpNewReno/TcpNoCongestionControl)
**.tcp.increasedIWEnabled = false                    # Increased Initial Window (RFC 3390) enabled/disabled
**.tcp.sackSupport = false                           # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)
**.tcp.windowScalingSupport = false                  # Window Scale (RFC 1323) support (header option) (WS will be enabled for a connection if both endpoints support it)
**.tcp.timestampSupport = false                      # Timestamps (RFC 1323) support (header option) (TS will be enabled for a connection if both endpoints support it)
**.tcp.mss = 1452                                    # Maximum Segment Size (RFC 793) (header option)
**.tcp.tcpAlgorithmClass = "TcpReno"                 # TcpReno/TcpTahoe/TcpNewReno/TcpNoCongestionControl/DumbTcp

# NIC settings
**.wlan[*].bitrate = 54Mbps
**.wlan[*].mgmt.frameCapacity = 10
**.wlan[*].mac.retryLimit = 7
**.wlan[*].mac.dcf.channelAccess.cwMin = 7
**.wlan[*].mac.cwMinMulticast = 31

**.wlan[*].radio.transmitter.power = 2mW

# # Radio medium configuration (without ground reflection)
# *.radioMedium.pathLoss.typename = "FreeSpacePathLoss"
# *.radioMedium.backgroundNoise.power = -110dBm


# **.wlan[*].radio.receiver.sensitivity = -80dBm
# **.wlan[*].radio.receiver.energyDetection = -85dBm
# **.wlan[*].radio.receiver.snirThreshold = 4dB

## RX HOSTS - Server applications
# RX hosts receive from TX hosts (apps 1 to numTX) - ports 10000+txhost_index
*.rxhost[*].app[1..6].typename = "TcpSinkApp"
*.rxhost[*].app[1..6].localPort = 10000 + ancestorIndex(0) - 1

# RX hosts receive from RXTX hosts (apps numTX+1 to numTX+numRXTX) - ports 20000+rxtxhost_index
*.rxhost[*].app[7..8].typename = "TcpSinkApp"
*.rxhost[*].app[7..8].localPort = 20000 + ancestorIndex(0) - 6-1



## TX HOSTS - Client applications
# TX hosts connect to RX hosts (apps 1 to numRX)
*.txhost[*].app[1..6].typename = "TcpSessionApp"
*.txhost[*].app[1..6].sendBytes = 1000MiB
*.txhost[*].app[1..6].active = true
*.txhost[*].app[1..6].localPort = 20000
*.txhost[*].app[1..6].connectAddress = "rxhost[" + string(ancestorIndex(0) - 1) + "]"
*.txhost[*].app[1..6].connectPort = 10000 + ancestorIndex(1)
*.txhost[*].app[1..6].tOpen = 100s + uniform(0s, 1s)
*.txhost[*].app[1..6].tSend = 100s + uniform(0s, 1s)
*.txhost[*].app[1..6].tClose = -1s 
*.txhost[*].app[1..6].sendScript = ""

# TX hosts connect to RXTX hosts (apps numRX+1 to numRX+numRXTX)
*.txhost[*].app[7..8].typename = "TcpSessionApp"
*.txhost[*].app[7..8].sendBytes = 1000MiB
*.txhost[*].app[7..8].active = true
*.txhost[*].app[7..8].localPort = 20000
*.txhost[*].app[7..8].connectAddress = "rxtxhost[" + string(ancestorIndex(0) - 6 - 1) + "]"
*.txhost[*].app[7..8].connectPort = 10000 + ancestorIndex(1)
*.txhost[*].app[7..8].tOpen = 100s + uniform(0s, 1s)
*.txhost[*].app[7..8].tSend = 100s + uniform(0s, 1s)
*.txhost[*].app[7..8].tClose = -1s
*.txhost[*].app[7..8].sendScript = ""



# RXTX hosts as servers - receive from TX hosts (apps 1 to numTX) - ports 10000+txhost_index
*.rxtxhost[*].app[1..6].typename = "TcpSinkApp"
*.rxtxhost[*].app[1..6].localPort = 10000 + ancestorIndex(0)- 1

# RXTX hosts as servers - receive from other RXTX hosts (apps numTX+1 to numTX+numRXTX) - ports 20000+rxtxhost_index
*.rxtxhost[*].app[7..8].typename = "TcpSinkApp"
*.rxtxhost[*].app[7..8].localPort = 20000 + ancestorIndex(0)- 6 - 1



# RXTX hosts as clients - connect to RX hosts
# rxtxhost[i] app[j] connects to rxhost[j-numTX-numRXTX-1] port[20000+i]
*.rxtxhost[*].app[9..14].typename = "TcpSessionApp"
*.rxtxhost[*].app[9..14].sendBytes = 1000MiB
*.rxtxhost[*].app[9..14].active = true
*.rxtxhost[*].app[9..14].localPort = 20000
*.rxtxhost[*].app[9..14].connectAddress = "rxhost[" + string(ancestorIndex(0)- 6-2-1) + "]"
*.rxtxhost[*].app[9..14].connectPort = 20000 + ancestorIndex(1)
*.rxtxhost[*].app[9..14].tOpen = 100s + uniform(0s, 1s)
*.rxtxhost[*].app[9..14].tSend = 100s + uniform(0s, 1s)
*.rxtxhost[*].app[9..14].tClose = -1s
*.rxtxhost[*].app[9..14].sendScript = ""

# RXTX hosts as clients - connect to other RXTX hosts
# rxtxhost[i] app[j] connects to rxtxhost[j-numTX-numRXTX-numRX-1] port[20000+i]
*.rxtxhost[*].app[15..16].typename = "TcpSessionApp"
*.rxtxhost[*].app[15..16].sendBytes = 1000MiB
*.rxtxhost[*].app[15..16].active = true
*.rxtxhost[*].app[15..16].localPort = 20000
*.rxtxhost[*].app[15..16].connectAddress = "rxtxhost[" + string(ancestorIndex(0)- 6 - 2 - 6 - 1) + "]"
*.rxtxhost[*].app[15..16].connectPort = 20000 + ancestorIndex(1)
*.rxtxhost[*].app[15..16].tOpen = 100s + uniform(0s, 1s)
*.rxtxhost[*].app[15..16].tSend = 100s + uniform(0s, 1s)
*.rxtxhost[*].app[15..16].tClose = -1s
*.rxtxhost[*].app[15..16].sendScript = ""

# Routing protocol
*.txhost[*].app[0].typename = "Batman"
*.rxhost[*].app[0].typename = "Batman"
*.rxtxhost[*].app[0].typename = "Batman"
*.relay[*].app[0].typename = "Batman"

**.batman.broadcastDelay = uniform(0s, 1s) 
cmdenv-express-mode = false
cmdenv-event-banners = false

**.app[0].cmdenv-log-level = detail

**.*.cmdenv-log-level = off

#**.cmdenv-log-level = off
#**.vector-recording = false
#**.host[*].app[*].scalar-recording = true
#**.scalar-recording = false

#**.cmdenv-log-level = off
cmdenv-redirect-output = true
cmdenv-log-prefix = "%t[%l]\t%C for %E: %|"

*.radioMedium.sameTransmissionStartTimeCheck = "ignore"

sim-time-limit = 200s


**.wlan[*].radio.displayCommunicationRange = true
**.wlan[*].radio.displayInterferenceRange = true
**.mobility.initFromDisplayString = false


# Enable visualizer module
*.visualizer.typename = "IntegratedCanvasVisualizer"

# Routing table visualization - Show individual routes
*.visualizer.routingTableVisualizer.displayRoutingTables = true
*.visualizer.routingTableVisualizer.displayLabels = true
*.visualizer.routingTableVisualizer.displayRoutesIndividually = true
*.visualizer.routingTableVisualizer.lineColor = "blue"
*.visualizer.routingTableVisualizer.lineStyle = "solid"
*.visualizer.routingTableVisualizer.lineWidth = 2
*.visualizer.routingTableVisualizer.nodeFilter = "*"
*.visualizer.routingTableVisualizer.destinationFilter = "*"
*.visualizer.routingTableVisualizer.labelFormat = "%d via %g"
*.visualizer.routingTableVisualizer.labelColor = "black"
*.visualizer.routingTableVisualizer.labelFont = "Arial, 8pt"



*.visualizer.networkRouteVisualizer.displayRoutes = true
*.visualizer.networkRouteVisualizer.packetFilter = "tcp"
*.visualizer.networkRouteVisualizer.animationSpeed = 50
*.visualizer.dataLinkVisualizer.displayLinks = true
*.visualizer.dataLinkVisualizer.holdAnimationTime = 3s



*.visualizer.dataLinkVisualizer.displayLinks = true
*.visualizer.dataLinkVisualizer.packetFilter = "*"

# Show node information
*.visualizer.networkNodeVisualizer.displayModuleName = true
*.visualizer.networkNodeVisualizer.displayInterfaceTable = true

# Interface table visualization
*.visualizer.interfaceTableVisualizer.displayInterfaceTables = true
*.visualizer.interfaceTableVisualizer.nodeFilter = "*"

# Batman protocol debugging
**.app[0].cmdenv-log-level = debug
**.app[0].printRoutingTable = true
#**.app[0].routingTableUpdateInterval = 10s